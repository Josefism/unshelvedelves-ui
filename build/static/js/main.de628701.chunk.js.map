{"version":3,"sources":["components/Footer.js","components/Header.js","assets/ElvesBanner.png","assets/UnshelvedElves-Series1.gif","App.js","reportWebVitals.js","index.js"],"names":["Footer","props","className","src","footerImg","alt","href","address","target","rel","Header","bannerImg","contractAddress","abi","contract","App","useState","currentAccount","setCurrentAccount","metamaskError","setMetamaskError","mineStatus","setMineStatus","checkWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","network","networkValid","networkChainId","toString","length","account","connectWalletHandler","alert","mintOneNftHandler","provider","ethers","providers","Web3Provider","signer","getSigner","nftContract","Contract","mintNFTs","value","utils","parseEther","nftTxn","wait","hash","mintTwoNftHandler","mintThreeNftHandler","mintFourNftHandler","mintFiveNftHandler","useEffect","on","_chainId","location","reload","ElvesBanner","class","onClick","ElvesGif","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de628701.chunk.js","sourcesContent":["import '../styles/Footer.css';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <footer className='footer'>\r\n            <div className='footer-img'>\r\n                <img src={props.footerImg} alt='Unshelved Elves GIF' />\r\n            </div>\r\n            <p>\r\n                SMART CONTRACT ADDRESS:&nbsp;\r\n                <br />\r\n                <span>\r\n                    <a className='contract-link' href={`https://mumbai.polygonscan.com/address/${props.address}`} target='_blank' rel='noreferrer'>\r\n                        {props.address}\r\n                    </a>\r\n                </span>\r\n            </p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import '../styles/Header.css';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header>\r\n            <h1 className=\"heading\">\r\n                Unshelved Elves - Series 1\r\n            </h1>\r\n            <div className='banner-img'>\r\n                <img src={props.bannerImg} alt=\"Unshelved Elves\" />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/ElvesBanner.04fb4b10.png\";","export default __webpack_public_path__ + \"static/media/UnshelvedElves-Series1.1d724eb5.gif\";","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './styles/App.css';\nimport contract from './contracts/UnshelvedElvesSeries1.json';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport ElvesBanner from './assets/ElvesBanner.png';\nimport ElvesGif from './assets/UnshelvedElves-Series1.gif';\n\nconst contractAddress = \"0x02c4ab6E4DB3cCb2406885E38Fa17181B6f96247\";\nconst abi = contract.abi;\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [metamaskError, setMetamaskError] = useState(null);\n  const [mineStatus, setMineStatus] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n\t  const { ethereum } = window;\n\t  \n\t  if (!ethereum) {\n\t\t  console.log(\"Make sure you have Metamask installed!\");\n\t\t  return;\n\t  } else {\n\t\t  console.log(\"Wallet exists! We're ready to go!\");\n\t  }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    const network = await ethereum.request({ method: 'eth_chainId' });\n    let networkValid = false;\n    let networkChainId = network.toString();\n    if (networkChainId === '0x4' || networkChainId === '0x137' || networkChainId === '0x80001' || networkChainId === '0x13881') {\n      networkValid = true;\n    }\n\n    if (accounts.length !== 0 && networkValid) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      setMetamaskError(true);\n      console.log(\"No authorized account found.\");\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const network = await ethereum.request({ method: 'eth_chainId' });\n      let networkValid = false;\n      let networkChainId = network.toString();\n      if (networkChainId === '0x4' || networkChainId === '0x137' || networkChainId === '0x80001' || networkChainId === '0x13881') {\n        networkValid = true;\n      }\n  \n      if (networkValid) {\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n        console.log(\"Found an account! Address: \", accounts[0]);\n        setMetamaskError(null);\n        setCurrentAccount(accounts[0]);\n      }\n\n      else {\n        setMetamaskError(true);\n      }\n\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintOneNftHandler = async () => { \n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, { value: ethers.utils.parseEther(\"10\") });\n\n        console.log(\"Mining ... please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://mumbai.polygonscan.com/tx/${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist.\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  const mintTwoNftHandler = async () => { \n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(2, { value: ethers.utils.parseEther(\"17.5\") });\n\n        console.log(\"Mining ... please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://mumbai.polygonscan.com/tx/${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist.\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  const mintThreeNftHandler = async () => { \n    try {\n\n      setMineStatus('mining');\n      \n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(3, { value: ethers.utils.parseEther(\"22.5\") });\n\n        console.log(\"Mining ... please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://mumbai.polygonscan.com/tx/${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist.\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  const mintFourNftHandler = async () => { \n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(4, { value: ethers.utils.parseEther(\"25\") });\n\n        console.log(\"Mining ... please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://mumbai.polygonscan.com/tx/${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist.\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  const mintFiveNftHandler = async () => { \n    try {\n\n      setMineStatus('mining');\n\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(5, { value: ethers.utils.parseEther(\"25\") });\n\n        console.log(\"Mining ... please wait.\");\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://mumbai.polygonscan.com/tx/${nftTxn.hash}`);\n        setMineStatus('success');\n      } else {\n        setMineStatus('error');\n        console.log(\"Ethereum object does not exist.\");\n      }\n    } catch (err) {\n      setMineStatus('error');\n      console.log(err);\n    }\n  }\n\n  const aboutContent = () => {\n    return (\n      <div class=\"about-content\">\n        <p>Have you ever wondered what those ubiquitous little Christmas elves get up to throughout the year when they <em>aren't</em> wandering around your house at night and spying on your children? Obviously, they go about their normal lives doing the same things you and I do!</p>\n        <p><strong>Unshelved Elves - Series 1</strong> is a collection of 20,000 Unshelved Elf NFTs living on the Polygon blockchain that imagines the elves out in the real world, living their best lives and going about their elf-business in a variety of locations.</p>\n        <p>Each <em>Unshelved Elf</em> in Series 1 was generated from a Python script randomly combining elements and traits, including: 19 Locations, 3 Suit Colors, 2 Positions, 4 Skin Tones, 6 Hair Colors, and 5 Eye Types (incl. 2 Sunglasses). Some elves have one or two optional elements: 5 Masks and/or 2 Necklaces.</p>\n        <p>Unshelved Elves (Series 2) is already in the works, with plans to add more locations, suit colors, overshirts, jackets, pants, shoes, and accessories! Mint your own elf today, and check back soon for more info about the next series!</p>\n      </div>\n    )\n  }\n\n  const connectWalletButton = () => {\n    return (\n      <div>\n        <p>Connect your Metamask wallet to get started minting Unshelved Elves!</p>\n        <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n          Connect Wallet\n        </button>\n      </div>\n    )\n  }\n\n  const mintNftButtons = () => {\n    return (\n      <div>\n        <p>Mint 1 to 5 elves at a time. The more you mint in a single transaction, the less you pay per-elf!</p>\n        <button onClick={mintOneNftHandler} className='cta-button mint-nft-button'>\n          Mint 1 Unshelved Elf (10 MATIC each)\n        </button>\n        <button onClick={mintTwoNftHandler} className='cta-button mint-nft-button'>\n          Mint 2 Unshelved Elves (8.75 MATIC each)\n        </button>\n        <button onClick={mintThreeNftHandler} className='cta-button mint-nft-button'>\n          Mint 3 Unshelved Elves (7.5 MATIC each)\n        </button>\n        <button onClick={mintFourNftHandler} className='cta-button mint-nft-button'>\n          Mint 4 Unshelved Elves (6.25 MATIC each)\n        </button>\n        <button onClick={mintFiveNftHandler} className='cta-button mint-nft-button'>\n          Mint 5 Unshelved Elves (5 MATIC each)\n        </button>\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n    }\n  }, [])\n\n  return (\n    <Fragment>\n      {metamaskError && <div className='metamask-error'>Please make sure you are connected to the Mumbai Network on Metamask!</div>}\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header bannerImg={ElvesBanner} />\n          <div className=\"content\">\n            {aboutContent()}\n            {currentAccount && mineStatus !== 'mining' && mintNftButtons()}\n            {!currentAccount && !mineStatus && connectWalletButton()}\n            <div className='mine-submission'>\n              {mineStatus === 'success' && <div className={mineStatus}>\n                <p>NFT minting successful!</p>\n                <p className='success-link'>\n                  <a href={`https://testnets.opensea.io/${currentAccount}/`} target='_blank' rel='noreferrer'>Click here</a>\n                  <span> to view your NFT on OpenSea.</span>\n                </p>\n              </div>}\n              {mineStatus === 'mining' && <div className={mineStatus}>\n                <div className='loader' />\n                <span>Transaction is mining</span>\n              </div>}\n              {mineStatus === 'error' && <div className={mineStatus}>\n                <p>Transaction failed. Make sure you have at least 10 Polygon MATIC in your Metamask wallet and try again.</p>\n              </div>}\n            </div>\n          </div>\n          <Footer address={contractAddress} footerImg={ElvesGif} />\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}